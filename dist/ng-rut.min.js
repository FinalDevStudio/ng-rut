!function(t){"use strict";function e(t){t=String(t);var e=t.substr(-1,1),r=t.substr(0,t.length-1);return e=e.replace(/[^\dk]+/gi,""),r=r.replace(/\D+/g,""),r+e}function r(t){if(t=e(t),t.length<3)return t;var r=t.substr(-1,1),n=t.substr(0,t.length-1);return n=n.replace(/(\d)(?=(\d{3})+\b)/g,"$1."),n+"-"+r}function n(t){if(t=e(t),!t||!t.length)return!0;var r=t.substr(-1,1),n=t.substr(0,t.length-1),u=0,i=1,a="k";for(isNaN(r)&&(r=a);n;n=Math.floor(n/10))i=(i+n%10*(9-u++%6))%11;return String(i?i-1:a)===r}t.module("ngRut",[]).factory("ngRut",function(){return{validate:n,format:r,clean:e}}).directive("ngRut",function(){return{restrict:"A",require:"ngModel",link:function(t,u,i,a){if("INPUT"!==u[0].tagName)throw new TypeError("NG-RUT: This directive must be used on INPUT elements only and element is "+u[0].tagName+".");return a?(a.$formatters.unshift(function(t){return r(a.$modelValue)}),void a.$parsers.unshift(function(t){return a.$setValidity("rut",n(t)),a.$setViewValue(r(t)),a.$render(),e(t)})):void console.warn("NG-RUT: No ngModel associated to the input element")}}}).filter("ngRut",function(){return function(t,u){switch(u){case"validate":return n(t);case"clean":return e(t);default:return r(t)}}})}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLXJ1dC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwiY2xlYW4iLCJ2YWwiLCJTdHJpbmciLCJ2ZXJpZmllciIsInN1YnN0ciIsImRpZ2l0cyIsImxlbmd0aCIsInJlcGxhY2UiLCJmb3JtYXQiLCJ2YWxpZGF0ZSIsIm0iLCJzIiwiayIsImlzTmFOIiwiTWF0aCIsImZsb29yIiwibW9kdWxlIiwiZmFjdG9yeSIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwicmVxdWlyZSIsImxpbmsiLCIkc2NvcGUiLCIkZWxlbWVudCIsIiRhdHRycyIsIm5nTW9kZWwiLCJ0YWdOYW1lIiwiVHlwZUVycm9yIiwiJGZvcm1hdHRlcnMiLCJ1bnNoaWZ0IiwidmFsdWUiLCIkbW9kZWxWYWx1ZSIsIiRwYXJzZXJzIiwiJHNldFZhbGlkaXR5IiwiJHNldFZpZXdWYWx1ZSIsIiRyZW5kZXIiLCJjb25zb2xlIiwid2FybiIsImZpbHRlciIsImFjdGlvbiJdLCJtYXBwaW5ncyI6IkNBY0MsU0FBVUEsR0FDVCxZQVFBLFNBQVNDLEdBQU1DLEdBQ2JBLEVBQU1DLE9BQU9ELEVBR2IsSUFBSUUsR0FBV0YsRUFBSUcsT0FBTyxHQUFJLEdBRzFCQyxFQUFTSixFQUFJRyxPQUFPLEVBQUdILEVBQUlLLE9BQVMsRUFReEMsT0FMQUgsR0FBV0EsRUFBU0ksUUFBUSxZQUFhLElBR3pDRixFQUFTQSxFQUFPRSxRQUFRLE9BQVEsSUFFekJGLEVBQVNGLEVBU2xCLFFBQVNLLEdBQU9QLEdBSWQsR0FIQUEsRUFBTUQsRUFBTUMsR0FHUkEsRUFBSUssT0FBUyxFQUNmLE1BQU9MLEVBSVQsSUFBSUUsR0FBV0YsRUFBSUcsT0FBTyxHQUFJLEdBRzFCQyxFQUFTSixFQUFJRyxPQUFPLEVBQUdILEVBQUlLLE9BQVMsRUFLeEMsT0FGQUQsR0FBU0EsRUFBT0UsUUFBUSxzQkFBdUIsT0FFeENGLEVBQVMsSUFBTUYsRUFTeEIsUUFBU00sR0FBU1IsR0FJaEIsR0FIQUEsRUFBTUQsRUFBTUMsSUFHUEEsSUFBUUEsRUFBSUssT0FDZixPQUFPLENBSVQsSUFBSUgsR0FBV0YsRUFBSUcsT0FBTyxHQUFJLEdBRzFCQyxFQUFTSixFQUFJRyxPQUFPLEVBQUdILEVBQUlLLE9BQVMsR0FFcENJLEVBQUksRUFDSkMsRUFBSSxFQUNKQyxFQUFJLEdBT1IsS0FKSUMsTUFBTVYsS0FDUkEsRUFBV1MsR0FHTlAsRUFBUUEsRUFBU1MsS0FBS0MsTUFBTVYsRUFBUyxJQUMxQ00sR0FBS0EsRUFBSU4sRUFBUyxJQUFNLEVBQUlLLElBQU0sSUFBTSxFQUcxQyxPQUFPUixRQUFPUyxFQUFJQSxFQUFJLEVBQUlDLEtBQU9ULEVBSW5DSixFQUFRaUIsT0FBTyxZQUdmQyxRQUFRLFFBQVMsV0FDZixPQUNFUixTQUFVQSxFQUNWRCxPQUFRQSxFQUNSUixNQUFPQSxLQUtYa0IsVUFBVSxRQUFTLFdBQ2pCLE9BRUVDLFNBQVUsSUFHVkMsUUFBUyxVQUVUQyxLQUFNLFNBQVVDLEVBQVFDLEVBQVVDLEVBQVFDLEdBRXhDLEdBQTRCLFVBQXhCRixFQUFTLEdBQUdHLFFBQ2QsS0FBTSxJQUFJQyxXQUFVLDZFQUErRUosRUFBUyxHQUFHRyxRQUFVLElBSTNILE9BQUtELElBS0xBLEVBQVFHLFlBQVlDLFFBQVEsU0FBVUMsR0FDcEMsTUFBT3RCLEdBQU9pQixFQUFRTSxtQkFHeEJOLEdBQVFPLFNBQVNILFFBQVEsU0FBVUMsR0FLakMsTUFKQUwsR0FBUVEsYUFBYSxNQUFPeEIsRUFBU3FCLElBQ3JDTCxFQUFRUyxjQUFjMUIsRUFBT3NCLElBQzdCTCxFQUFRVSxVQUVEbkMsRUFBTThCLFVBYmJNLFNBQVFDLEtBQUssMERBb0JyQkMsT0FBTyxRQUFTLFdBQ2QsTUFBTyxVQUFVckMsRUFBS3NDLEdBQ3BCLE9BQVFBLEdBQ04sSUFBSyxXQUNILE1BQU85QixHQUFTUixFQUVsQixLQUFLLFFBQ0gsTUFBT0QsR0FBTUMsRUFFZixTQUNFLE1BQU9PLEdBQU9QLFFBS3RCRiIsImZpbGUiOiJuZy1ydXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFuZ3VsYXJKUyBDaGlsZWFuIFJVVCBVdGlsaXRpZXMuXG4gKlxuICogUHJvdmlkZXMgYSBkaXJlY3RpdmUsIGEgY29uc3RhbnQgYW5kIGEgZmlsdGVyIHdoaWNoIHByb3ZpZGVzIENoaWxlYW4gUlVUIGNsZWFuaW5nLFxuICogdmFsaWRhdGlvbiBhbmQgZm9ybWF0dGluZy5cbiAqXG4gKiBAbmFtZSBuZy1ydXRcbiAqIEBtb2R1bGUgbmdSdXRcbiAqIEB0eXBlIEFuZ3VsYXJKUyBNb2R1bGVcbiAqIEByZXF1aXJlcyBBbmd1bGFySlMgMS4yK1xuICogQHZlcnNpb24gMS4wLjBcbiAqIEBhdXRob3IgU2FudGlhZ28gRy4gTWFyw61uIDxzYW50aWFnb0BmaW5hbGRldnN0dWRpby5jb20+XG4gKi9cblxuKGZ1bmN0aW9uIChhbmd1bGFyKSB7XG4gICd1c2Ugc3RyaWN0JztcblxuICAvKipcbiAgICogQ2xlYW4gYSBzdHJpbmcgb3V0IG9mIGludmFsaWQgUlVUIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGNsZWFuLlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBjbGVhbmVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGNsZWFuKHZhbCkge1xuICAgIHZhbCA9IFN0cmluZyh2YWwpO1xuXG4gICAgLyogT2J0YWluIHRoZSB2ZXJpZmllciBkaWdpdCAqL1xuICAgIHZhciB2ZXJpZmllciA9IHZhbC5zdWJzdHIoLTEsIDEpO1xuXG4gICAgLyogT2J0YWluIHRoZSBSVVQgZGlnaXRzICovXG4gICAgdmFyIGRpZ2l0cyA9IHZhbC5zdWJzdHIoMCwgdmFsLmxlbmd0aCAtIDEpO1xuXG4gICAgLyogS2VlcCBvbmx5IGRpZ2l0cyBhbmQgJ2snIG9yICdLJyAqL1xuICAgIHZlcmlmaWVyID0gdmVyaWZpZXIucmVwbGFjZSgvW15cXGRrXSsvZ2ksICcnKTtcblxuICAgIC8qIEtlZXAgb25seSBkaWdpdHMgKi9cbiAgICBkaWdpdHMgPSBkaWdpdHMucmVwbGFjZSgvXFxEKy9nLCAnJyk7XG5cbiAgICByZXR1cm4gZGlnaXRzICsgdmVyaWZpZXI7XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0cyBhIHN0cmluZyBhcyBhIHZhbGlkIFJVVCBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGZvcm1hdC5cbiAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgZm9ybWF0dGVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGZvcm1hdCh2YWwpIHtcbiAgICB2YWwgPSBjbGVhbih2YWwpO1xuXG4gICAgLyogQ2hlY2sgaWYgdmFsdWUgaXMgdG9vIHNob3J0ICovXG4gICAgaWYgKHZhbC5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gdmFsO1xuICAgIH1cblxuICAgIC8qIE9idGFpbiB0aGUgdmVyaWZpZXIgZGlnaXQgKi9cbiAgICB2YXIgdmVyaWZpZXIgPSB2YWwuc3Vic3RyKC0xLCAxKTtcblxuICAgIC8qIE9idGFpbiB0aGUgUlVUIGRpZ2l0cyAqL1xuICAgIHZhciBkaWdpdHMgPSB2YWwuc3Vic3RyKDAsIHZhbC5sZW5ndGggLSAxKTtcblxuICAgIC8qIEdyb3VwIGRpZ2l0cyB3aXRoIGRvdHMgKi9cbiAgICBkaWdpdHMgPSBkaWdpdHMucmVwbGFjZSgvKFxcZCkoPz0oXFxkezN9KStcXGIpL2csICckMS4nKTtcblxuICAgIHJldHVybiBkaWdpdHMgKyAnLScgKyB2ZXJpZmllcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZXMgYSBzdHJpbmcgZm9yIGEgdmFsaWQgUlVUIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbCBUaGUgc3RyaW5nIHRvIHZhbGlkYXRlLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBJZiB0aGUgc3RyaW5nIGlzIGEgdmFsaWQgUlVUIG51bWJlci5cbiAgICovXG4gIGZ1bmN0aW9uIHZhbGlkYXRlKHZhbCkge1xuICAgIHZhbCA9IGNsZWFuKHZhbCk7XG5cbiAgICAvKiBDaGVjayBpZiB0aGVyZSdzIGEgdmFsdWUgdG8gdmFsaWRhdGUgKi9cbiAgICBpZiAoIXZhbCB8fCAhdmFsLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLyogR2V0IHZlcmlmaWVyIGRpZ2l0ICovXG4gICAgdmFyIHZlcmlmaWVyID0gdmFsLnN1YnN0cigtMSwgMSk7XG5cbiAgICAvKiBnZXQgUlVUIGRpZ2l0cyAqL1xuICAgIHZhciBkaWdpdHMgPSB2YWwuc3Vic3RyKDAsIHZhbC5sZW5ndGggLSAxKTtcblxuICAgIHZhciBtID0gMDtcbiAgICB2YXIgcyA9IDE7XG4gICAgdmFyIGsgPSAnayc7XG5cbiAgICAvKiBJZiB0aGUgdmVyaWZpZXIgaXMgbm90IGEgbnVtYmVyIHRoZW4gaXQgbXVzIGJlICdrJyAqL1xuICAgIGlmIChpc05hTih2ZXJpZmllcikpIHtcbiAgICAgIHZlcmlmaWVyID0gaztcbiAgICB9XG5cbiAgICBmb3IgKDsgZGlnaXRzOyBkaWdpdHMgPSBNYXRoLmZsb29yKGRpZ2l0cyAvIDEwKSkge1xuICAgICAgcyA9IChzICsgZGlnaXRzICUgMTAgKiAoOSAtIG0rKyAlIDYpKSAlIDExO1xuICAgIH1cblxuICAgIHJldHVybiBTdHJpbmcocyA/IHMgLSAxIDogaykgPT09IHZlcmlmaWVyO1xuICB9XG5cbiAgLyogRGVmaW5lIHRoZSBBbmd1bGFyIG1vZHVsZSAqL1xuICBhbmd1bGFyLm1vZHVsZSgnbmdSdXQnLCBbXSkuXG5cbiAgLyogQ3JlYXRlIHRoZSBzZXJ2aWNlICovXG4gIGZhY3RvcnkoJ25nUnV0JywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICB2YWxpZGF0ZTogdmFsaWRhdGUsXG4gICAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICAgIGNsZWFuOiBjbGVhblxuICAgIH07XG4gIH0pLlxuXG4gIC8qIENyZWF0ZSB0aGUgZGlyZWN0aXZlICovXG4gIGRpcmVjdGl2ZSgnbmdSdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8qIFJlc3RyaWN0IHRvIGFuIGF0dHJpYnV0ZSB0eXBlICovXG4gICAgICByZXN0cmljdDogJ0EnLFxuXG4gICAgICAvKiBFbGVtZW50IG11c3QgaGF2ZSBuZy1tb2RlbCBhdHRyaWJ1dGUgKi9cbiAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcblxuICAgICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgbmdNb2RlbCkge1xuICAgICAgICAvKiBDaGVjayBpZiAkZWxlbWVudCBpcyBhbiBpbnB1dCAqL1xuICAgICAgICBpZiAoJGVsZW1lbnRbMF0udGFnTmFtZSAhPT0gJ0lOUFVUJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJORy1SVVQ6IFRoaXMgZGlyZWN0aXZlIG11c3QgYmUgdXNlZCBvbiBJTlBVVCBlbGVtZW50cyBvbmx5IGFuZCBlbGVtZW50IGlzIFwiICsgJGVsZW1lbnRbMF0udGFnTmFtZSArIFwiLlwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIENoZWNrIGlmIGl0ICRlbGVtZW50IGEgTmdNb2RlbCBhc3NvY2lhdGVkICovXG4gICAgICAgIGlmICghbmdNb2RlbCkge1xuICAgICAgICAgIGNvbnNvbGUud2FybihcIk5HLVJVVDogTm8gbmdNb2RlbCBhc3NvY2lhdGVkIHRvIHRoZSBpbnB1dCBlbGVtZW50XCIpO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIG5nTW9kZWwuJGZvcm1hdHRlcnMudW5zaGlmdChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICByZXR1cm4gZm9ybWF0KG5nTW9kZWwuJG1vZGVsVmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICBuZ01vZGVsLiRwYXJzZXJzLnVuc2hpZnQoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgbmdNb2RlbC4kc2V0VmFsaWRpdHkoJ3J1dCcsIHZhbGlkYXRlKHZhbHVlKSk7XG4gICAgICAgICAgbmdNb2RlbC4kc2V0Vmlld1ZhbHVlKGZvcm1hdCh2YWx1ZSkpO1xuICAgICAgICAgIG5nTW9kZWwuJHJlbmRlcigpO1xuXG4gICAgICAgICAgcmV0dXJuIGNsZWFuKHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgfSkuXG5cbiAgLyogQ3JlYXRlIHRoZSBmaWx0ZXIgKi9cbiAgZmlsdGVyKCduZ1J1dCcsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgYWN0aW9uKSB7XG4gICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICBjYXNlICd2YWxpZGF0ZSc6XG4gICAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHZhbCk7XG5cbiAgICAgICAgY2FzZSAnY2xlYW4nOlxuICAgICAgICAgIHJldHVybiBjbGVhbih2YWwpO1xuXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmV0dXJuIGZvcm1hdCh2YWwpO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xuXG59KGFuZ3VsYXIpKTtcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==