!function(t){"use strict";function n(t){t=String(t);var n=t.substr(-1,1),r=t.substr(0,t.length-1);return n=n.replace(/[^\dk]+/gi,""),r=r.replace(/\D+/g,""),r+n}function r(t){if(t=n(t),t.length<3)return t;var r=t.substr(-1,1),e=t.substr(0,t.length-1);return e=e.replace(/(\d)(?=(\d{3})+\b)/g,"$1."),e+"-"+r}function e(t){if(t=n(t),t.length<3)return t;var r=t.substr(-1,1),e=t.substr(0,t.length-1),u=0,i=1,l="k";for(isNaN(r)&&(r=l);e;e=Math.floor(e/10))i=(i+e%10*(9-u++%6))%11;return String(i?i-1:l)===r}function u(t){return t=e(t),ngModel.$setValidity("rut",t),t}function i(t){return u(t)?t:null}function l(t){return u(t)?r(t):null}t.module("ngRut",[]).factory("ngRut",function(){return{validate:e,format:r,clean:n}}).directive("ngRut",function(){return{restrict:"A",require:"ngModel",link:function(t,n,e,u){if("INPUT"===element[0].tagName)throw new TypeError("[ngRut] directive must be used on [INPUT] elements only!");u.$parsers.unshift(i),u.$formatters.unshift(l),n.on("input",function(){n.val(r(n.val()))})}}}).filter("ngRut",function(){return function(t,u){switch(u){case"validate":return e(t);case"clean":return n(t);default:return r(t)}}})}(angular);
//# sourceMappingURL=data:application/json;base64,