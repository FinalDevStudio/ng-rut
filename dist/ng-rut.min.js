!function(t){"use strict";function e(t){t=String(t);var e=t.substr(-1,1),r=t.substr(0,t.length-1);return e=e.replace(/[^\dk]+/gi,""),r=r.replace(/\D+/g,""),r+e}function r(t){if(t=e(t),t.length<3)return t;var r=t.substr(-1,1),n=t.substr(0,t.length-1);return n=n.replace(/(\d)(?=(\d{3})+\b)/g,"$1."),n+"-"+r}function n(t){if(t=e(t),!t||!t.length)return!0;var r=t.substr(-1,1),n=t.substr(0,t.length-1),u=0,i=1,a="k";for(isNaN(r)&&(r=a);n;n=Math.floor(n/10))i=(i+n%10*(9-u++%6))%11;return String(i?i-1:a)===r}t.module("ngRut",[]).factory("ngRut",function(){return{validate:n,format:r,clean:e}}).directive("ngRut",function(){return{restrict:"A",require:"ngModel",link:function(t,u,i,a){if("INPUT"!==u[0].tagName)throw new TypeError("NG-RUT: This directive must be used on INPUT elements only and element is "+u[0].tagName+".");return a?(a.$formatters.unshift(function(t){return a.$setValidity("rut",n(t)),r(a.$modelValue)}),void a.$parsers.unshift(function(t){return a.$setValidity("rut",n(t)),a.$setViewValue(r(t)),a.$render(),e(t)})):void console.warn("NG-RUT: No ngModel associated to the input element")}}}).filter("ngRut",function(){return function(t,u){switch(u){case"validate":return n(t);case"clean":return e(t);default:return r(t)}}})}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLXJ1dC5qcyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwiY2xlYW4iLCJ2YWwiLCJTdHJpbmciLCJ2ZXJpZmllciIsInN1YnN0ciIsImRpZ2l0cyIsImxlbmd0aCIsInJlcGxhY2UiLCJmb3JtYXQiLCJ2YWxpZGF0ZSIsIm0iLCJzIiwiayIsImlzTmFOIiwiTWF0aCIsImZsb29yIiwibW9kdWxlIiwiZmFjdG9yeSIsImRpcmVjdGl2ZSIsInJlc3RyaWN0IiwicmVxdWlyZSIsImxpbmsiLCIkc2NvcGUiLCIkZWxlbWVudCIsIiRhdHRycyIsIm5nTW9kZWwiLCJ0YWdOYW1lIiwiVHlwZUVycm9yIiwiJGZvcm1hdHRlcnMiLCJ1bnNoaWZ0IiwidmFsdWUiLCIkc2V0VmFsaWRpdHkiLCIkbW9kZWxWYWx1ZSIsIiRwYXJzZXJzIiwiJHNldFZpZXdWYWx1ZSIsIiRyZW5kZXIiLCJjb25zb2xlIiwid2FybiIsImZpbHRlciIsImFjdGlvbiJdLCJtYXBwaW5ncyI6IkNBY0MsU0FBVUEsR0FDVCxZQVFBLFNBQVNDLEdBQU1DLEdBQ2JBLEVBQU1DLE9BQU9ELEVBR2IsSUFBSUUsR0FBV0YsRUFBSUcsT0FBTyxHQUFJLEdBRzFCQyxFQUFTSixFQUFJRyxPQUFPLEVBQUdILEVBQUlLLE9BQVMsRUFReEMsT0FMQUgsR0FBV0EsRUFBU0ksUUFBUSxZQUFhLElBR3pDRixFQUFTQSxFQUFPRSxRQUFRLE9BQVEsSUFFekJGLEVBQVNGLEVBU2xCLFFBQVNLLEdBQU9QLEdBSWQsR0FIQUEsRUFBTUQsRUFBTUMsR0FHUkEsRUFBSUssT0FBUyxFQUNmLE1BQU9MLEVBSVQsSUFBSUUsR0FBV0YsRUFBSUcsT0FBTyxHQUFJLEdBRzFCQyxFQUFTSixFQUFJRyxPQUFPLEVBQUdILEVBQUlLLE9BQVMsRUFLeEMsT0FGQUQsR0FBU0EsRUFBT0UsUUFBUSxzQkFBdUIsT0FFeENGLEVBQVMsSUFBTUYsRUFTeEIsUUFBU00sR0FBU1IsR0FJaEIsR0FIQUEsRUFBTUQsRUFBTUMsSUFHUEEsSUFBUUEsRUFBSUssT0FDZixPQUFPLENBSVQsSUFBSUgsR0FBV0YsRUFBSUcsT0FBTyxHQUFJLEdBRzFCQyxFQUFTSixFQUFJRyxPQUFPLEVBQUdILEVBQUlLLE9BQVMsR0FFcENJLEVBQUksRUFDSkMsRUFBSSxFQUNKQyxFQUFJLEdBT1IsS0FKSUMsTUFBTVYsS0FDUkEsRUFBV1MsR0FHTlAsRUFBUUEsRUFBU1MsS0FBS0MsTUFBTVYsRUFBUyxJQUMxQ00sR0FBS0EsRUFBSU4sRUFBUyxJQUFNLEVBQUlLLElBQU0sSUFBTSxFQUcxQyxPQUFPUixRQUFPUyxFQUFJQSxFQUFJLEVBQUlDLEtBQU9ULEVBSW5DSixFQUFRaUIsT0FBTyxZQUdmQyxRQUFRLFFBQVMsV0FDZixPQUNFUixTQUFVQSxFQUNWRCxPQUFRQSxFQUNSUixNQUFPQSxLQUtYa0IsVUFBVSxRQUFTLFdBQ2pCLE9BRUVDLFNBQVUsSUFHVkMsUUFBUyxVQUVUQyxLQUFNLFNBQVVDLEVBQVFDLEVBQVVDLEVBQVFDLEdBRXhDLEdBQTRCLFVBQXhCRixFQUFTLEdBQUdHLFFBQ2QsS0FBTSxJQUFJQyxXQUFVLDZFQUErRUosRUFBUyxHQUFHRyxRQUFVLElBSTNILE9BQUtELElBS0xBLEVBQVFHLFlBQVlDLFFBQVEsU0FBVUMsR0FFcEMsTUFEQUwsR0FBUU0sYUFBYSxNQUFPdEIsRUFBU3FCLElBQzlCdEIsRUFBT2lCLEVBQVFPLG1CQUd4QlAsR0FBUVEsU0FBU0osUUFBUSxTQUFVQyxHQUtqQyxNQUpBTCxHQUFRTSxhQUFhLE1BQU90QixFQUFTcUIsSUFDckNMLEVBQVFTLGNBQWMxQixFQUFPc0IsSUFDN0JMLEVBQVFVLFVBRURuQyxFQUFNOEIsVUFkYk0sU0FBUUMsS0FBSywwREFxQnJCQyxPQUFPLFFBQVMsV0FDZCxNQUFPLFVBQVVyQyxFQUFLc0MsR0FDcEIsT0FBUUEsR0FDTixJQUFLLFdBQ0gsTUFBTzlCLEdBQVNSLEVBRWxCLEtBQUssUUFDSCxNQUFPRCxHQUFNQyxFQUVmLFNBQ0UsTUFBT08sR0FBT1AsUUFLdEJGIiwiZmlsZSI6Im5nLXJ1dC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQW5ndWxhckpTIENoaWxlYW4gUlVUIFV0aWxpdGllcy5cbiAqXG4gKiBQcm92aWRlcyBhIGRpcmVjdGl2ZSwgYSBjb25zdGFudCBhbmQgYSBmaWx0ZXIgd2hpY2ggcHJvdmlkZXMgQ2hpbGVhbiBSVVQgY2xlYW5pbmcsXG4gKiB2YWxpZGF0aW9uIGFuZCBmb3JtYXR0aW5nLlxuICpcbiAqIEBuYW1lIG5nLXJ1dFxuICogQG1vZHVsZSBuZ1J1dFxuICogQHR5cGUgQW5ndWxhckpTIE1vZHVsZVxuICogQHJlcXVpcmVzIEFuZ3VsYXJKUyAxLjIrXG4gKiBAdmVyc2lvbiAxLjAuMFxuICogQGF1dGhvciBTYW50aWFnbyBHLiBNYXLDrW4gPHNhbnRpYWdvQGZpbmFsZGV2c3R1ZGlvLmNvbT5cbiAqL1xuXG4oZnVuY3Rpb24gKGFuZ3VsYXIpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBDbGVhbiBhIHN0cmluZyBvdXQgb2YgaW52YWxpZCBSVVQgY2hhcmFjdGVycy5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gY2xlYW4uXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIGNsZWFuZWQgc3RyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gY2xlYW4odmFsKSB7XG4gICAgdmFsID0gU3RyaW5nKHZhbCk7XG5cbiAgICAvKiBPYnRhaW4gdGhlIHZlcmlmaWVyIGRpZ2l0ICovXG4gICAgdmFyIHZlcmlmaWVyID0gdmFsLnN1YnN0cigtMSwgMSk7XG5cbiAgICAvKiBPYnRhaW4gdGhlIFJVVCBkaWdpdHMgKi9cbiAgICB2YXIgZGlnaXRzID0gdmFsLnN1YnN0cigwLCB2YWwubGVuZ3RoIC0gMSk7XG5cbiAgICAvKiBLZWVwIG9ubHkgZGlnaXRzIGFuZCAnaycgb3IgJ0snICovXG4gICAgdmVyaWZpZXIgPSB2ZXJpZmllci5yZXBsYWNlKC9bXlxcZGtdKy9naSwgJycpO1xuXG4gICAgLyogS2VlcCBvbmx5IGRpZ2l0cyAqL1xuICAgIGRpZ2l0cyA9IGRpZ2l0cy5yZXBsYWNlKC9cXEQrL2csICcnKTtcblxuICAgIHJldHVybiBkaWdpdHMgKyB2ZXJpZmllcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXRzIGEgc3RyaW5nIGFzIGEgdmFsaWQgUlVUIG51bWJlci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IHZhbCBUaGUgdmFsdWUgdG8gZm9ybWF0LlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBmb3JtYXR0ZWQgc3RyaW5nLlxuICAgKi9cbiAgZnVuY3Rpb24gZm9ybWF0KHZhbCkge1xuICAgIHZhbCA9IGNsZWFuKHZhbCk7XG5cbiAgICAvKiBDaGVjayBpZiB2YWx1ZSBpcyB0b28gc2hvcnQgKi9cbiAgICBpZiAodmFsLmxlbmd0aCA8IDMpIHtcbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgLyogT2J0YWluIHRoZSB2ZXJpZmllciBkaWdpdCAqL1xuICAgIHZhciB2ZXJpZmllciA9IHZhbC5zdWJzdHIoLTEsIDEpO1xuXG4gICAgLyogT2J0YWluIHRoZSBSVVQgZGlnaXRzICovXG4gICAgdmFyIGRpZ2l0cyA9IHZhbC5zdWJzdHIoMCwgdmFsLmxlbmd0aCAtIDEpO1xuXG4gICAgLyogR3JvdXAgZGlnaXRzIHdpdGggZG90cyAqL1xuICAgIGRpZ2l0cyA9IGRpZ2l0cy5yZXBsYWNlKC8oXFxkKSg/PShcXGR7M30pK1xcYikvZywgJyQxLicpO1xuXG4gICAgcmV0dXJuIGRpZ2l0cyArICctJyArIHZlcmlmaWVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBhIHN0cmluZyBmb3IgYSB2YWxpZCBSVVQgbnVtYmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsIFRoZSBzdHJpbmcgdG8gdmFsaWRhdGUuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBSVVQgbnVtYmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gdmFsaWRhdGUodmFsKSB7XG4gICAgdmFsID0gY2xlYW4odmFsKTtcblxuICAgIC8qIENoZWNrIGlmIHRoZXJlJ3MgYSB2YWx1ZSB0byB2YWxpZGF0ZSAqL1xuICAgIGlmICghdmFsIHx8ICF2YWwubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKiBHZXQgdmVyaWZpZXIgZGlnaXQgKi9cbiAgICB2YXIgdmVyaWZpZXIgPSB2YWwuc3Vic3RyKC0xLCAxKTtcblxuICAgIC8qIGdldCBSVVQgZGlnaXRzICovXG4gICAgdmFyIGRpZ2l0cyA9IHZhbC5zdWJzdHIoMCwgdmFsLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIG0gPSAwO1xuICAgIHZhciBzID0gMTtcbiAgICB2YXIgayA9ICdrJztcblxuICAgIC8qIElmIHRoZSB2ZXJpZmllciBpcyBub3QgYSBudW1iZXIgdGhlbiBpdCBtdXMgYmUgJ2snICovXG4gICAgaWYgKGlzTmFOKHZlcmlmaWVyKSkge1xuICAgICAgdmVyaWZpZXIgPSBrO1xuICAgIH1cblxuICAgIGZvciAoOyBkaWdpdHM7IGRpZ2l0cyA9IE1hdGguZmxvb3IoZGlnaXRzIC8gMTApKSB7XG4gICAgICBzID0gKHMgKyBkaWdpdHMgJSAxMCAqICg5IC0gbSsrICUgNikpICUgMTE7XG4gICAgfVxuXG4gICAgcmV0dXJuIFN0cmluZyhzID8gcyAtIDEgOiBrKSA9PT0gdmVyaWZpZXI7XG4gIH1cblxuICAvKiBEZWZpbmUgdGhlIEFuZ3VsYXIgbW9kdWxlICovXG4gIGFuZ3VsYXIubW9kdWxlKCduZ1J1dCcsIFtdKS5cblxuICAvKiBDcmVhdGUgdGhlIHNlcnZpY2UgKi9cbiAgZmFjdG9yeSgnbmdSdXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSxcbiAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgY2xlYW46IGNsZWFuXG4gICAgfTtcbiAgfSkuXG5cbiAgLyogQ3JlYXRlIHRoZSBkaXJlY3RpdmUgKi9cbiAgZGlyZWN0aXZlKCduZ1J1dCcsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgLyogUmVzdHJpY3QgdG8gYW4gYXR0cmlidXRlIHR5cGUgKi9cbiAgICAgIHJlc3RyaWN0OiAnQScsXG5cbiAgICAgIC8qIEVsZW1lbnQgbXVzdCBoYXZlIG5nLW1vZGVsIGF0dHJpYnV0ZSAqL1xuICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuXG4gICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCAkZWxlbWVudCwgJGF0dHJzLCBuZ01vZGVsKSB7XG4gICAgICAgIC8qIENoZWNrIGlmICRlbGVtZW50IGlzIGFuIGlucHV0ICovXG4gICAgICAgIGlmICgkZWxlbWVudFswXS50YWdOYW1lICE9PSAnSU5QVVQnKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk5HLVJVVDogVGhpcyBkaXJlY3RpdmUgbXVzdCBiZSB1c2VkIG9uIElOUFVUIGVsZW1lbnRzIG9ubHkgYW5kIGVsZW1lbnQgaXMgXCIgKyAkZWxlbWVudFswXS50YWdOYW1lICsgXCIuXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogQ2hlY2sgaWYgaXQgJGVsZW1lbnQgYSBOZ01vZGVsIGFzc29jaWF0ZWQgKi9cbiAgICAgICAgaWYgKCFuZ01vZGVsKSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKFwiTkctUlVUOiBObyBuZ01vZGVsIGFzc29jaWF0ZWQgdG8gdGhlIGlucHV0IGVsZW1lbnRcIik7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy51bnNoaWZ0KGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgIG5nTW9kZWwuJHNldFZhbGlkaXR5KCdydXQnLCB2YWxpZGF0ZSh2YWx1ZSkpO1xuICAgICAgICAgIHJldHVybiBmb3JtYXQobmdNb2RlbC4kbW9kZWxWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG5nTW9kZWwuJHBhcnNlcnMudW5zaGlmdChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgncnV0JywgdmFsaWRhdGUodmFsdWUpKTtcbiAgICAgICAgICBuZ01vZGVsLiRzZXRWaWV3VmFsdWUoZm9ybWF0KHZhbHVlKSk7XG4gICAgICAgICAgbmdNb2RlbC4kcmVuZGVyKCk7XG5cbiAgICAgICAgICByZXR1cm4gY2xlYW4odmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KS5cblxuICAvKiBDcmVhdGUgdGhlIGZpbHRlciAqL1xuICBmaWx0ZXIoJ25nUnV0JywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAodmFsLCBhY3Rpb24pIHtcbiAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgIGNhc2UgJ3ZhbGlkYXRlJzpcbiAgICAgICAgICByZXR1cm4gdmFsaWRhdGUodmFsKTtcblxuICAgICAgICBjYXNlICdjbGVhbic6XG4gICAgICAgICAgcmV0dXJuIGNsZWFuKHZhbCk7XG5cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICByZXR1cm4gZm9ybWF0KHZhbCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG5cbn0oYW5ndWxhcikpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9