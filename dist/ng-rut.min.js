!function(t){"use strict";function n(t){return String(t).replace(/[^\dk]+/gi,"")}function r(t){if(t=n(t),t.length<3)return t;var r=t.substr(-1,1),u=t.substr(0,t.length-1);return u=u.replace(/(\d)(?=(\d{3})+\b)/g,"$1."),u+"-"+r}function u(t){if(t=n(t),t.length<3)return t;var r=t.substr(-1,1),u=t.substr(0,t.length-1),e=0,i=1,f="k";for(isNaN(r)&&(r=f);u;u=Math.floor(u/10))i=(i+u%10*(9-e++%6))%11;return String(i?i-1:f)===r}function e(t){function e(n){return n=u(n),t.$setValidity("rut",n),n}function i(t){return t=n(t),e(t)?t:null}function f(t){return t=n(t),e(t)?r(t):null}t.$parsers.unshift(i),t.$formatters.unshift(f)}function i(t){t.on("input",function(){t.val(r(t.val()))})}t.module("Rut",[]).directive("ngRut",function(){return{restrict:"A",require:"ngModel",link:function(t,n,r,u){e(u),i(n)}}}).filter("rut",function(){return r}).constant("RutHelper",{clean:n,format:r,validate:u})}(angular);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5nLXJ1dC5qcyJdLCJuYW1lcyI6WyJuZyIsImNsZWFuIiwidmFsIiwiU3RyaW5nIiwicmVwbGFjZSIsImZvcm1hdCIsImxlbmd0aCIsInZlcmlmaWVyIiwic3Vic3RyIiwibnVtYmVyIiwidmFsaWRhdGUiLCJtIiwicyIsImsiLCJpc05hTiIsIk1hdGgiLCJmbG9vciIsImFkZFZhbGlkYXRvclRvTW9kZWwiLCJuZ01vZGVsIiwiaXNWYWxpZCIsIiRzZXRWYWxpZGl0eSIsInZhbGlkYXRlQW5kRmlsdGVyIiwidmFsaWRhdGVBbmRGb3JtYXQiLCIkcGFyc2VycyIsInVuc2hpZnQiLCIkZm9ybWF0dGVycyIsImZvcm1hdFJ1dE9uSW5wdXQiLCIkZWxlbWVudCIsIm9uIiwibW9kdWxlIiwiZGlyZWN0aXZlIiwicmVzdHJpY3QiLCJyZXF1aXJlIiwibGluayIsIiRzY29wZSIsIiRhdHRycyIsImZpbHRlciIsImNvbnN0YW50IiwiYW5ndWxhciJdLCJtYXBwaW5ncyI6IkNBRUMsU0FBVUEsR0FDVCxZQVNBLFNBQVNDLEdBQU1DLEdBQ2IsTUFBT0MsUUFBT0QsR0FBS0UsUUFBUSxZQUFhLElBVTFDLFFBQVNDLEdBQU9ILEdBR2QsR0FGQUEsRUFBTUQsRUFBTUMsR0FFUkEsRUFBSUksT0FBUyxFQUNmLE1BQU9KLEVBR1QsSUFBSUssR0FBV0wsRUFBSU0sT0FBTyxHQUFJLEdBQzFCQyxFQUFTUCxFQUFJTSxPQUFPLEVBQUdOLEVBQUlJLE9BQVMsRUFJeEMsT0FGQUcsR0FBU0EsRUFBT0wsUUFBUSxzQkFBdUIsT0FFeENLLEVBQVMsSUFBTUYsRUFVeEIsUUFBU0csR0FBU1IsR0FHaEIsR0FGQUEsRUFBTUQsRUFBTUMsR0FFUkEsRUFBSUksT0FBUyxFQUNmLE1BQU9KLEVBR1QsSUFBSUssR0FBV0wsRUFBSU0sT0FBTyxHQUFJLEdBQzFCQyxFQUFTUCxFQUFJTSxPQUFPLEVBQUdOLEVBQUlJLE9BQVMsR0FDcENLLEVBQUksRUFBR0MsRUFBSSxFQUFHQyxFQUFJLEdBTXRCLEtBSklDLE1BQU1QLEtBQ1JBLEVBQVdNLEdBR05KLEVBQVFBLEVBQVNNLEtBQUtDLE1BQU1QLEVBQVMsSUFDMUNHLEdBQUtBLEVBQUlILEVBQVMsSUFBTSxFQUFJRSxJQUFNLElBQU0sRUFHMUMsT0FBT1IsUUFBT1MsRUFBSUEsRUFBSSxFQUFJQyxLQUFPTixFQVVuQyxRQUFTVSxHQUFvQkMsR0FTM0IsUUFBU0MsR0FBUWpCLEdBS2YsTUFKQUEsR0FBTVEsRUFBU1IsR0FFZmdCLEVBQVFFLGFBQWEsTUFBT2xCLEdBRXJCQSxFQVVULFFBQVNtQixHQUFrQm5CLEdBR3pCLE1BRkFBLEdBQU1ELEVBQU1DLEdBRUxpQixFQUFRakIsR0FBT0EsRUFBTSxLQVU5QixRQUFTb0IsR0FBa0JwQixHQUd6QixNQUZBQSxHQUFNRCxFQUFNQyxHQUVMaUIsRUFBUWpCLEdBQU9HLEVBQU9ILEdBQU8sS0FJdENnQixFQUFRSyxTQUFTQyxRQUFRSCxHQUN6QkgsRUFBUU8sWUFBWUQsUUFBUUYsR0FROUIsUUFBU0ksR0FBaUJDLEdBQ3hCQSxFQUFTQyxHQUFHLFFBQVMsV0FDbkJELEVBQVN6QixJQUFJRyxFQUFPc0IsRUFBU3pCLFVBS2pDRixFQUFHNkIsT0FBTyxVQUVWQyxVQUFVLFFBQVMsV0FDakIsT0FDRUMsU0FBVSxJQUNWQyxRQUFTLFVBQ1RDLEtBQU0sU0FBVUMsRUFBUVAsRUFBVVEsRUFBUWpCLEdBQ3hDRCxFQUFvQkMsR0FDcEJRLEVBQWlCQyxPQUt2QlMsT0FBTyxNQUFPLFdBQ1osTUFBTy9CLEtBR1RnQyxTQUFTLGFBQ1BwQyxNQUFPQSxFQUNQSSxPQUFRQSxFQUNSSyxTQUFVQSxLQUdaNEIiLCJmaWxlIjoibmctcnV0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIGFuZ3VsYXIgKi9cblxuKGZ1bmN0aW9uIChuZykge1xuICAndXNlIHN0cmljdCc7XG5cbiAgLyoqXG4gICAqIENsZWFuIGEgc3RyaW5nIG91dCBvZiBpbnZhbGlkIGNoYXJhY3RlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGNsZWFuLlxuICAgKlxuICAgKiBAcmV0cnVuIHtTdHJpbmd9IFRoZSBjbGVhbiBzdHJpbmcuXG4gICAqL1xuICBmdW5jdGlvbiBjbGVhbih2YWwpIHtcbiAgICByZXR1cm4gU3RyaW5nKHZhbCkucmVwbGFjZSgvW15cXGRrXSsvZ2ksICcnKTsgLyogS2VlcCBvbmx5IGRpZ2l0cyBhbmQgJ2snICovXG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0cyBhIHN0cmluZyBhcyBhIHZhbGlkIFJVVCBudW1iZXIuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGZvcm1hdC5cbiAgICpcbiAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgZm9ybWF0dGVkIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIGZvcm1hdCh2YWwpIHtcbiAgICB2YWwgPSBjbGVhbih2YWwpO1xuXG4gICAgaWYgKHZhbC5sZW5ndGggPCAzKSB7IC8qIENoZWNrIGlmIHZhbHVlIGlzIHRvbyBzaG9ydCAqL1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICB2YXIgdmVyaWZpZXIgPSB2YWwuc3Vic3RyKC0xLCAxKSwgLyogT2J0YWluIHRoZSB2ZXJpZmllciBkaWdpdCAqL1xuICAgICAgICBudW1iZXIgPSB2YWwuc3Vic3RyKDAsIHZhbC5sZW5ndGggLSAxKTsgLyogT2J0YWluIHRoZSBSVVQgbnVtYmVyICovXG5cbiAgICBudW1iZXIgPSBudW1iZXIucmVwbGFjZSgvKFxcZCkoPz0oXFxkezN9KStcXGIpL2csICckMS4nKTsgLyogR3JvdXAgZGlnaXRzIHdpdGggZG90cyAqL1xuXG4gICAgcmV0dXJuIG51bWJlciArICctJyArIHZlcmlmaWVyO1xuICB9XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlcyBhIHN0cmluZyBmb3IgYSB2YWxpZCBSVVQgbnVtYmVyLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdmFsIFRoZSBzdHJpbmcgdG8gdmFsaWRhdGUuXG4gICAqXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IElmIHRoZSBzdHJpbmcgaXMgYSB2YWxpZCBSVVQgbnVtYmVyLlxuICAgKi9cbiAgZnVuY3Rpb24gdmFsaWRhdGUodmFsKSB7XG4gICAgdmFsID0gY2xlYW4odmFsKTtcblxuICAgIGlmICh2YWwubGVuZ3RoIDwgMykgeyAvKiBDaGVjayBpZiB2YWx1ZSBpcyB0b28gc2hvcnQgKi9cbiAgICAgIHJldHVybiB2YWw7XG4gICAgfVxuXG4gICAgdmFyIHZlcmlmaWVyID0gdmFsLnN1YnN0cigtMSwgMSksIC8qIEdldCB2ZXJpZmllciBkaWdpdCAqL1xuICAgICAgICBudW1iZXIgPSB2YWwuc3Vic3RyKDAsIHZhbC5sZW5ndGggLSAxKSwgLyogZ2V0IFJVVCBudW1iZXJzICovXG4gICAgICAgIG0gPSAwLCBzID0gMSwgayA9ICdrJztcblxuICAgIGlmIChpc05hTih2ZXJpZmllcikpIHtcbiAgICAgIHZlcmlmaWVyID0gaztcbiAgICB9XG5cbiAgICBmb3IgKDsgbnVtYmVyOyBudW1iZXIgPSBNYXRoLmZsb29yKG51bWJlciAvIDEwKSkge1xuICAgICAgcyA9IChzICsgbnVtYmVyICUgMTAgKiAoOSAtIG0rKyAlIDYpKSAlIDExO1xuICAgIH1cblxuICAgIHJldHVybiBTdHJpbmcocyA/IHMgLSAxIDogaykgPT09IHZlcmlmaWVyO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSB2YWxpZGF0b3IgZm9yIHRoZSBuZ01vZGVsLlxuICAgKlxuICAgKiBAcGFyYW0ge25nTW9kZWx9IEluamVjdGVkIG5nTW9kZWwuXG4gICAqXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHZhbHVlLlxuICAgKi9cbiAgZnVuY3Rpb24gYWRkVmFsaWRhdG9yVG9Nb2RlbChuZ01vZGVsKSB7XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHZhbHVlIGlzIGEgdmFsaWQgUlVULlxuICAgICAqXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFRoZSB2YWx1ZSB0byBjaGVjay5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1N0cmluZ30gVGhlIHZhbHVlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIGlzVmFsaWQodmFsKSB7XG4gICAgICB2YWwgPSB2YWxpZGF0ZSh2YWwpO1xuXG4gICAgICBuZ01vZGVsLiRzZXRWYWxpZGl0eSgncnV0JywgdmFsKTtcblxuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaWx0ZXJzIGFuZCB2YWxpZGF0ZXMgYSB2YWx1ZSBhcyBSVVQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVBbmRGaWx0ZXIodmFsKSB7XG4gICAgICB2YWwgPSBjbGVhbih2YWwpO1xuXG4gICAgICByZXR1cm4gaXNWYWxpZCh2YWwpID8gdmFsIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZXMgYW5kIGZvcm1hdHMgYSB2YWx1ZSBhcyBSVVQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gVGhlIHZhbHVlIHRvIGNoZWNrLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgdmFsdWUuXG4gICAgICovXG4gICAgZnVuY3Rpb24gdmFsaWRhdGVBbmRGb3JtYXQodmFsKSB7XG4gICAgICB2YWwgPSBjbGVhbih2YWwpO1xuXG4gICAgICByZXR1cm4gaXNWYWxpZCh2YWwpID8gZm9ybWF0KHZhbCkgOiBudWxsO1xuICAgIH1cblxuICAgIC8qIEFzc2lnbiB2YWxpZGF0b3JzIGFuZCBmb3JtYXR0ZXJzICovXG4gICAgbmdNb2RlbC4kcGFyc2Vycy51bnNoaWZ0KHZhbGlkYXRlQW5kRmlsdGVyKTtcbiAgICBuZ01vZGVsLiRmb3JtYXR0ZXJzLnVuc2hpZnQodmFsaWRhdGVBbmRGb3JtYXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZvcm1hdHMgdGhlIFJVVCBudW1iZXIgYXMgaXQncyB0eXBlZC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IFRoZSBBbmd1bGFyIGlucHV0IGVsZW1lbnQuXG4gICAqL1xuICBmdW5jdGlvbiBmb3JtYXRSdXRPbklucHV0KCRlbGVtZW50KSB7XG4gICAgJGVsZW1lbnQub24oJ2lucHV0JywgZnVuY3Rpb24gKCkge1xuICAgICAgJGVsZW1lbnQudmFsKGZvcm1hdCgkZWxlbWVudC52YWwoKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyogRGVmaW5lIHRoZSBBbmd1bGFyIG1vZHVsZSAqL1xuICBuZy5tb2R1bGUoJ1J1dCcsIFtdKS5cblxuICBkaXJlY3RpdmUoJ25nUnV0JywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB7XG4gICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuICAgICAgbGluazogZnVuY3Rpb24gKCRzY29wZSwgJGVsZW1lbnQsICRhdHRycywgbmdNb2RlbCkge1xuICAgICAgICBhZGRWYWxpZGF0b3JUb01vZGVsKG5nTW9kZWwpO1xuICAgICAgICBmb3JtYXRSdXRPbklucHV0KCRlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KS5cblxuICBmaWx0ZXIoJ3J1dCcsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9KS5cblxuICBjb25zdGFudCgnUnV0SGVscGVyJywge1xuICAgIGNsZWFuOiBjbGVhbixcbiAgICBmb3JtYXQ6IGZvcm1hdCxcbiAgICB2YWxpZGF0ZTogdmFsaWRhdGVcbiAgfSk7XG5cbn0oYW5ndWxhcikpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9